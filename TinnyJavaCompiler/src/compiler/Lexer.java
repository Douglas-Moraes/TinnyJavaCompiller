/* The following code was generated by JFlex 1.7.0 */

package compiler;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/morae/IdeaProjects/TinnyJavaCompiller/TinnyJavaCompiler/src/compiler/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\41\1\43\1\43\1\42\27\0\1\32\2\0\1\33\1\34"+
    "\2\32\1\40\1\32\1\31\1\32\12\35\1\0\1\37\1\0\1\36"+
    "\3\0\22\27\1\25\7\27\4\0\1\30\1\0\1\2\1\23\1\3"+
    "\1\17\1\6\1\21\1\5\1\24\1\7\1\27\1\4\1\14\1\10"+
    "\1\20\1\11\1\1\1\27\1\12\1\15\1\13\1\22\1\16\1\26"+
    "\3\27\1\33\1\0\1\34\7\0\1\43\44\0\1\27\12\0\1\27"+
    "\4\0\1\27\5\0\27\27\1\0\37\27\1\0\u01ca\27\4\0\14\27"+
    "\16\0\5\27\7\0\1\27\1\0\1\27\21\0\160\30\5\27\1\0"+
    "\2\27\2\0\4\27\1\0\1\27\6\0\1\27\1\0\3\27\1\0"+
    "\1\27\1\0\24\27\1\0\123\27\1\0\213\27\1\0\7\30\246\27"+
    "\1\0\46\27\2\0\1\27\7\0\47\27\11\0\55\30\1\0\1\30"+
    "\1\0\2\30\1\0\2\30\1\0\1\30\10\0\33\27\5\0\3\27"+
    "\35\0\13\30\5\0\53\27\25\30\12\35\4\0\2\27\1\30\143\27"+
    "\1\0\1\27\7\30\2\0\6\30\2\27\2\30\1\0\4\30\2\27"+
    "\12\35\3\27\2\0\1\27\20\0\1\27\1\30\36\27\33\30\2\0"+
    "\131\27\13\30\1\27\16\0\12\35\41\27\11\30\2\27\4\0\1\27"+
    "\5\0\26\27\4\30\1\27\11\30\1\27\3\30\1\27\5\30\22\0"+
    "\31\27\3\30\104\0\25\27\1\0\10\27\26\0\16\30\1\0\41\30"+
    "\66\27\3\30\1\27\22\30\1\27\7\30\12\27\2\30\2\0\12\35"+
    "\1\0\20\27\3\30\1\0\10\27\2\0\2\27\2\0\26\27\1\0"+
    "\7\27\1\0\1\27\3\0\4\27\2\0\1\30\1\27\7\30\2\0"+
    "\2\30\2\0\3\30\1\27\10\0\1\30\4\0\2\27\1\0\3\27"+
    "\2\30\2\0\12\35\2\27\17\0\3\30\1\0\6\27\4\0\2\27"+
    "\2\0\26\27\1\0\7\27\1\0\2\27\1\0\2\27\1\0\2\27"+
    "\2\0\1\30\1\0\5\30\4\0\2\30\2\0\3\30\3\0\1\30"+
    "\7\0\4\27\1\0\1\27\7\0\12\35\2\30\3\27\1\30\13\0"+
    "\3\30\1\0\11\27\1\0\3\27\1\0\26\27\1\0\7\27\1\0"+
    "\2\27\1\0\5\27\2\0\1\30\1\27\10\30\1\0\3\30\1\0"+
    "\3\30\2\0\1\27\17\0\2\27\2\30\2\0\12\35\11\0\1\27"+
    "\7\0\3\30\1\0\10\27\2\0\2\27\2\0\26\27\1\0\7\27"+
    "\1\0\2\27\1\0\5\27\2\0\1\30\1\27\7\30\2\0\2\30"+
    "\2\0\3\30\10\0\2\30\4\0\2\27\1\0\3\27\2\30\2\0"+
    "\12\35\1\0\1\27\20\0\1\30\1\27\1\0\6\27\3\0\3\27"+
    "\1\0\4\27\3\0\2\27\1\0\1\27\1\0\2\27\3\0\2\27"+
    "\3\0\3\27\3\0\14\27\4\0\5\30\3\0\3\30\1\0\4\30"+
    "\2\0\1\27\6\0\1\30\16\0\12\35\20\0\4\30\1\0\10\27"+
    "\1\0\3\27\1\0\27\27\1\0\20\27\3\0\1\27\7\30\1\0"+
    "\3\30\1\0\4\30\7\0\2\30\1\0\3\27\5\0\2\27\2\30"+
    "\2\0\12\35\20\0\1\27\3\30\1\0\10\27\1\0\3\27\1\0"+
    "\27\27\1\0\12\27\1\0\5\27\2\0\1\30\1\27\7\30\1\0"+
    "\3\30\1\0\4\30\7\0\2\30\7\0\1\27\1\0\2\27\2\30"+
    "\2\0\12\35\1\0\2\27\16\0\3\30\1\0\10\27\1\0\3\27"+
    "\1\0\51\27\2\0\1\27\7\30\1\0\3\30\1\0\4\30\1\27"+
    "\5\0\3\27\1\30\7\0\3\27\2\30\2\0\12\35\12\0\6\27"+
    "\2\0\2\30\1\0\22\27\3\0\30\27\1\0\11\27\1\0\1\27"+
    "\2\0\7\27\3\0\1\30\4\0\6\30\1\0\1\30\1\0\10\30"+
    "\6\0\12\35\2\0\2\30\15\0\60\27\1\30\2\27\7\30\5\0"+
    "\7\27\10\30\1\0\12\35\47\0\2\27\1\0\1\27\2\0\2\27"+
    "\1\0\1\27\2\0\1\27\6\0\4\27\1\0\7\27\1\0\3\27"+
    "\1\0\1\27\1\0\1\27\2\0\2\27\1\0\4\27\1\30\2\27"+
    "\6\30\1\0\2\30\1\27\2\0\5\27\1\0\1\27\1\0\6\30"+
    "\2\0\12\35\2\0\4\27\40\0\1\27\27\0\2\30\6\0\12\35"+
    "\13\0\1\30\1\0\1\30\1\0\1\30\4\0\2\30\10\27\1\0"+
    "\44\27\4\0\24\30\1\0\2\30\5\27\13\30\1\0\44\30\11\0"+
    "\1\30\71\0\53\27\24\30\1\27\12\35\6\0\6\27\4\30\4\27"+
    "\3\30\1\27\3\30\2\27\7\30\3\27\4\30\15\27\14\30\1\27"+
    "\1\30\12\35\4\30\2\0\46\27\1\0\1\27\5\0\1\27\2\0"+
    "\53\27\1\0\u014d\27\1\0\4\27\2\0\7\27\1\0\1\27\1\0"+
    "\4\27\2\0\51\27\1\0\4\27\2\0\41\27\1\0\4\27\2\0"+
    "\7\27\1\0\1\27\1\0\4\27\2\0\17\27\1\0\71\27\1\0"+
    "\4\27\2\0\103\27\2\0\3\30\40\0\20\27\20\0\126\27\2\0"+
    "\6\27\3\0\u026c\27\2\0\21\27\1\0\32\27\5\0\113\27\3\0"+
    "\3\30\10\27\7\0\15\27\1\0\4\27\3\30\13\0\22\27\3\30"+
    "\13\0\22\27\2\30\14\0\15\27\1\0\3\27\1\0\2\30\14\0"+
    "\64\27\40\30\3\0\1\27\4\0\1\27\1\30\2\0\12\35\41\0"+
    "\3\30\2\0\12\35\6\0\130\27\10\0\5\27\2\30\42\27\1\30"+
    "\1\27\5\0\106\27\12\0\37\27\1\0\14\30\4\0\14\30\12\0"+
    "\12\35\36\27\2\0\5\27\13\0\54\27\4\0\32\27\6\0\12\35"+
    "\46\0\27\27\5\30\4\0\65\27\12\30\1\0\35\30\2\0\1\30"+
    "\12\35\6\0\12\35\15\0\1\27\10\0\17\30\101\0\5\30\57\27"+
    "\21\30\7\27\4\0\12\35\21\0\11\30\14\0\3\30\36\27\15\30"+
    "\2\27\12\35\54\27\16\30\14\0\44\27\24\30\10\0\12\35\3\0"+
    "\3\27\12\35\44\27\2\0\11\27\107\0\3\30\1\0\25\30\4\27"+
    "\1\30\4\27\3\30\2\27\1\0\2\30\6\0\300\27\66\30\5\0"+
    "\5\30\u0116\27\2\0\6\27\2\0\46\27\2\0\6\27\2\0\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\1\27\1\0\37\27\2\0\65\27"+
    "\1\0\7\27\1\0\1\27\3\0\3\27\1\0\7\27\3\0\4\27"+
    "\2\0\6\27\4\0\15\27\5\0\3\27\1\0\7\27\53\0\1\43"+
    "\1\43\25\0\2\30\23\0\1\30\34\0\1\27\15\0\1\27\20\0"+
    "\15\27\63\0\41\30\21\0\1\27\4\0\1\27\2\0\12\27\1\0"+
    "\1\27\3\0\5\27\6\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\1\0\13\27\2\0\4\27\5\0\5\27\4\0\1\27\21\0"+
    "\43\30\2\27\4\30\u032d\0\64\30\u0716\0\57\27\1\0\57\27\1\0"+
    "\205\27\6\0\4\27\3\30\2\27\14\0\46\27\1\0\1\27\5\0"+
    "\1\27\2\0\70\27\7\0\1\27\17\0\1\30\27\27\11\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\40\30\57\0\1\27\u01d5\0\2\27"+
    "\1\30\31\0\17\30\1\0\5\27\2\0\3\30\2\27\4\0\126\27"+
    "\2\0\2\30\2\0\3\27\1\0\132\27\1\0\4\27\5\0\51\27"+
    "\3\0\136\27\21\0\33\27\65\0\20\27\u0200\0\u19b6\27\112\0\u51d6\27"+
    "\52\0\u048d\27\103\0\56\27\2\0\u010d\27\3\0\20\27\12\35\2\27"+
    "\24\0\57\27\4\30\1\0\12\30\1\0\37\27\2\30\106\27\14\30"+
    "\45\0\11\27\2\0\147\27\2\0\44\27\1\0\10\27\77\0\13\27"+
    "\1\30\3\27\1\30\4\27\1\30\27\27\5\30\30\0\64\27\14\0"+
    "\2\30\62\27\22\30\12\0\12\35\6\0\22\30\6\27\3\0\1\27"+
    "\1\0\1\27\2\0\12\35\34\27\10\30\2\0\27\27\15\30\14\0"+
    "\35\27\3\0\4\30\57\27\16\30\16\0\1\27\12\35\6\0\5\27"+
    "\1\30\12\27\12\35\5\27\1\0\51\27\16\30\11\0\3\27\1\30"+
    "\10\27\2\30\2\0\12\35\6\0\27\27\3\0\1\27\3\30\62\27"+
    "\1\30\1\27\3\30\2\27\2\30\5\27\2\30\1\27\1\30\1\27"+
    "\30\0\3\27\2\0\13\27\5\30\2\0\3\27\2\30\12\0\6\27"+
    "\2\0\6\27\2\0\6\27\11\0\7\27\1\0\7\27\1\0\53\27"+
    "\1\0\12\27\12\0\163\27\10\30\1\0\2\30\2\0\12\35\6\0"+
    "\u2ba4\27\14\0\27\27\4\0\61\27\u2104\0\u016e\27\2\0\152\27\46\0"+
    "\7\27\14\0\5\27\5\0\1\27\1\30\12\27\1\0\15\27\1\0"+
    "\5\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\154\27\41\0"+
    "\u016b\27\22\0\100\27\2\0\66\27\50\0\14\27\4\0\20\30\20\0"+
    "\20\30\3\0\2\30\30\0\3\30\40\0\5\27\1\0\207\27\23\0"+
    "\12\35\7\0\32\27\4\0\1\30\1\0\32\27\13\0\131\27\3\0"+
    "\6\27\2\0\6\27\2\0\6\27\2\0\3\27\43\0\14\27\1\0"+
    "\32\27\1\0\23\27\1\0\2\27\1\0\17\27\2\0\16\27\42\0"+
    "\173\27\105\0\65\30\210\0\1\30\202\0\35\27\3\0\61\27\17\0"+
    "\1\30\37\0\40\27\20\0\21\27\1\30\10\27\1\30\5\0\46\27"+
    "\5\30\5\0\36\27\2\0\44\27\4\0\10\27\1\0\5\30\52\0"+
    "\236\27\2\0\12\35\6\0\44\27\4\0\44\27\4\0\50\27\10\0"+
    "\64\27\234\0\u0137\27\11\0\26\27\12\0\10\27\230\0\6\27\2\0"+
    "\1\27\1\0\54\27\1\0\2\27\3\0\1\27\2\0\27\27\12\0"+
    "\27\27\11\0\37\27\101\0\23\27\1\0\2\27\12\0\26\27\12\0"+
    "\32\27\106\0\70\27\6\0\2\27\100\0\1\27\3\30\1\0\2\30"+
    "\5\0\4\30\4\27\1\0\3\27\1\0\33\27\4\0\3\30\4\0"+
    "\1\30\40\0\35\27\3\0\35\27\43\0\10\27\1\0\34\27\2\30"+
    "\31\0\66\27\12\0\26\27\12\0\23\27\15\0\22\27\156\0\111\27"+
    "\67\0\63\27\15\0\63\27\u030d\0\3\30\65\27\17\30\37\0\12\35"+
    "\17\0\4\30\55\27\13\30\25\0\31\27\7\0\12\35\6\0\3\30"+
    "\44\27\16\30\1\0\12\35\20\0\43\27\1\30\2\0\1\27\11\0"+
    "\3\30\60\27\16\30\4\27\5\0\3\30\3\0\12\35\1\27\1\0"+
    "\1\27\43\0\22\27\1\0\31\27\14\30\6\0\1\30\101\0\7\27"+
    "\1\0\1\27\1\0\4\27\1\0\17\27\1\0\12\27\7\0\57\27"+
    "\14\30\5\0\12\35\6\0\4\30\1\0\10\27\2\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\30\1\27"+
    "\7\30\2\0\2\30\2\0\3\30\2\0\1\27\6\0\1\30\5\0"+
    "\5\27\2\30\2\0\7\30\3\0\5\30\213\0\65\27\22\30\4\27"+
    "\5\0\12\35\46\0\60\27\24\30\2\27\1\0\1\27\10\0\12\35"+
    "\246\0\57\27\7\30\2\0\11\30\27\0\4\27\2\30\42\0\60\27"+
    "\21\30\3\0\1\27\13\0\12\35\46\0\53\27\15\30\10\0\12\35"+
    "\66\0\32\27\3\0\17\30\4\0\12\35\u0166\0\100\27\12\35\25\0"+
    "\1\27\u01c0\0\71\27\u0107\0\11\27\1\0\45\27\10\30\1\0\10\30"+
    "\1\27\17\0\12\35\30\0\36\27\2\0\26\30\1\0\16\30\u0349\0"+
    "\u039a\27\146\0\157\30\21\0\304\27\u0abc\0\u042f\27\u0fd1\0\u0247\27\u21b9\0"+
    "\u0239\27\7\0\37\27\1\0\12\35\146\0\36\27\2\0\5\30\13\0"+
    "\60\27\7\30\11\0\4\27\14\0\12\35\11\0\25\27\5\0\23\27"+
    "\u0370\0\105\27\13\0\1\27\56\30\20\0\4\30\15\27\100\0\1\27"+
    "\37\0\u17ed\27\23\0\u02f3\27\u250d\0\2\27\u0bfe\0\153\27\5\0\15\27"+
    "\3\0\11\27\7\0\12\27\3\0\2\30\u14c6\0\5\30\3\0\6\30"+
    "\10\0\10\30\2\0\7\30\36\0\4\30\224\0\3\30\u01bb\0\125\27"+
    "\1\0\107\27\1\0\2\27\2\0\1\27\2\0\2\27\2\0\4\27"+
    "\1\0\14\27\1\0\1\27\1\0\7\27\1\0\101\27\1\0\4\27"+
    "\2\0\10\27\1\0\7\27\1\0\34\27\1\0\4\27\1\0\5\27"+
    "\1\0\1\27\3\0\7\27\1\0\u0154\27\2\0\31\27\1\0\31\27"+
    "\1\0\37\27\1\0\31\27\1\0\37\27\1\0\31\27\1\0\37\27"+
    "\1\0\31\27\1\0\37\27\1\0\31\27\1\0\10\27\2\0\62\35"+
    "\u0200\0\67\30\4\0\62\30\10\0\1\30\16\0\1\30\26\0\5\30"+
    "\1\0\17\30\u0550\0\7\30\1\0\21\30\2\0\7\30\1\0\2\30"+
    "\1\0\5\30\u07d5\0\305\27\13\0\7\30\51\0\104\27\7\30\5\0"+
    "\12\35\u04a6\0\4\27\1\0\33\27\1\0\2\27\1\0\1\27\2\0"+
    "\1\27\1\0\12\27\1\0\4\27\1\0\1\27\1\0\1\27\6\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\1\27\2\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\2\27\1\0\1\27\2\0\4\27\1\0"+
    "\7\27\1\0\4\27\1\0\4\27\1\0\1\27\1\0\12\27\1\0"+
    "\21\27\5\0\3\27\1\0\5\27\1\0\21\27\u0274\0\32\30\6\0"+
    "\32\30\6\0\32\30\u0e76\0\ua6d7\27\51\0\u1035\27\13\0\336\27\2\0"+
    "\u1682\27\u295e\0\u021e\27\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\30\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\13\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\3\2\1\0\5\2\1\13\2\2"+
    "\1\14\10\2\1\15\4\2\1\16\3\2\1\17\10\2"+
    "\1\20\2\2\1\21\7\2\1\22\4\2\1\23\3\2"+
    "\1\24\1\25\1\26\2\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\44\0\44\0\44"+
    "\0\u01d4\0\44\0\44\0\44\0\44\0\u01f8\0\u021c\0\u0240"+
    "\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c\0\154"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c"+
    "\0\154\0\u05a0\0\u05c4\0\u05e8\0\154\0\u060c\0\u0630\0\u0654"+
    "\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\154\0\u072c\0\u0750"+
    "\0\154\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c"+
    "\0\154\0\u0870\0\u0894\0\u08b8\0\u08dc\0\154\0\u0900\0\u0924"+
    "\0\u0948\0\154\0\154\0\154\0\u096c\0\u0990";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\4\1\6\1\7\5\4"+
    "\1\10\1\11\1\12\1\4\1\13\3\4\1\14\1\15"+
    "\1\4\2\2\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\46\0\1\4\1\27\7\4\1\30"+
    "\7\4\1\31\6\4\1\32\3\0\1\4\7\0\30\4"+
    "\1\32\3\0\1\4\7\0\13\4\1\33\7\4\1\34"+
    "\4\4\1\32\3\0\1\4\7\0\13\4\1\35\14\4"+
    "\1\32\3\0\1\4\7\0\7\4\1\36\7\4\1\37"+
    "\1\40\7\4\1\32\3\0\1\4\7\0\12\4\1\41"+
    "\15\4\1\32\3\0\1\4\7\0\10\4\1\42\17\4"+
    "\1\32\3\0\1\4\7\0\10\4\1\43\17\4\1\32"+
    "\3\0\1\4\7\0\10\4\1\44\2\4\1\45\14\4"+
    "\1\32\3\0\1\4\7\0\12\4\1\46\15\4\1\32"+
    "\3\0\1\4\7\0\23\4\1\47\4\4\1\32\3\0"+
    "\1\4\43\0\1\21\47\0\1\25\3\0\2\4\1\50"+
    "\25\4\1\32\3\0\1\4\7\0\6\4\1\51\1\4"+
    "\1\52\17\4\1\32\3\0\1\4\7\0\22\4\1\53"+
    "\5\4\1\32\3\0\1\4\7\0\27\54\15\0\1\4"+
    "\1\55\26\4\1\32\3\0\1\4\7\0\1\4\1\56"+
    "\26\4\1\32\3\0\1\4\7\0\14\4\1\57\13\4"+
    "\1\32\3\0\1\4\7\0\1\60\27\4\1\32\3\0"+
    "\1\4\7\0\12\4\1\61\15\4\1\32\3\0\1\4"+
    "\7\0\1\4\1\62\26\4\1\32\3\0\1\4\7\0"+
    "\6\4\1\63\21\4\1\32\3\0\1\4\7\0\21\4"+
    "\1\64\6\4\1\32\3\0\1\4\7\0\11\4\1\65"+
    "\16\4\1\32\3\0\1\4\7\0\10\4\1\66\17\4"+
    "\1\32\3\0\1\4\7\0\11\4\1\67\16\4\1\32"+
    "\3\0\1\4\7\0\6\4\1\70\21\4\1\32\3\0"+
    "\1\4\7\0\3\4\1\71\24\4\1\32\3\0\1\4"+
    "\7\0\15\4\1\72\12\4\1\32\3\0\1\4\7\0"+
    "\12\4\1\73\15\4\1\32\3\0\1\4\7\0\13\4"+
    "\1\74\14\4\1\32\3\0\1\4\7\0\31\54\3\0"+
    "\1\54\7\0\14\4\1\75\13\4\1\32\3\0\1\4"+
    "\7\0\11\4\1\61\16\4\1\32\3\0\1\4\7\0"+
    "\5\4\1\76\22\4\1\32\3\0\1\4\7\0\10\4"+
    "\1\77\17\4\1\32\3\0\1\4\7\0\12\4\1\100"+
    "\15\4\1\32\3\0\1\4\7\0\16\4\1\101\11\4"+
    "\1\32\3\0\1\4\7\0\22\4\1\102\5\4\1\32"+
    "\3\0\1\4\7\0\1\4\1\37\26\4\1\32\3\0"+
    "\1\4\7\0\6\4\1\103\21\4\1\32\3\0\1\4"+
    "\7\0\13\4\1\104\14\4\1\32\3\0\1\4\7\0"+
    "\1\4\1\105\26\4\1\32\3\0\1\4\7\0\1\4"+
    "\1\106\26\4\1\32\3\0\1\4\7\0\5\4\1\107"+
    "\22\4\1\32\3\0\1\4\7\0\6\4\1\110\21\4"+
    "\1\32\3\0\1\4\7\0\14\4\1\111\13\4\1\32"+
    "\3\0\1\4\7\0\11\4\1\112\16\4\1\32\3\0"+
    "\1\4\7\0\6\4\1\113\21\4\1\32\3\0\1\4"+
    "\7\0\13\4\1\114\14\4\1\32\3\0\1\4\7\0"+
    "\17\4\1\115\10\4\1\32\3\0\1\4\7\0\5\4"+
    "\1\116\22\4\1\32\3\0\1\4\7\0\4\4\1\117"+
    "\23\4\1\32\3\0\1\4\7\0\12\4\1\120\15\4"+
    "\1\32\3\0\1\4\7\0\2\4\1\121\25\4\1\32"+
    "\3\0\1\4\7\0\2\4\1\122\25\4\1\32\3\0"+
    "\1\4\7\0\12\4\1\123\15\4\1\32\3\0\1\4"+
    "\7\0\2\4\1\101\25\4\1\32\3\0\1\4\7\0"+
    "\5\4\1\61\22\4\1\32\3\0\1\4\7\0\4\4"+
    "\1\61\23\4\1\32\3\0\1\4\7\0\5\4\1\124"+
    "\22\4\1\32\3\0\1\4\7\0\5\4\1\122\22\4"+
    "\1\32\3\0\1\4\7\0\12\4\1\125\15\4\1\32"+
    "\3\0\1\4\7\0\5\4\1\126\22\4\1\32\3\0"+
    "\1\4\7\0\16\4\1\122\11\4\1\32\3\0\1\4"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\3\11\1\1\4\11\4\1\1\0"+
    "\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3278) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        System.out.println("Fim de arquivo!!!");
    System.exit(0);

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 23: break;
          case 2: 
            { return new Token(TipoToken.IDENTIFICADOR, yytext(), yyline);
            } 
            // fall through
          case 24: break;
          case 3: 
            { return new Token(TipoToken.OPERADOR_ARITMETICO, yytext(), yyline);
            } 
            // fall through
          case 25: break;
          case 4: 
            { return new Token(TipoToken.ABRE_BLOCO, yytext(), yyline);
            } 
            // fall through
          case 26: break;
          case 5: 
            { return new Token(TipoToken.FECHA_BLOCO, yytext(), yyline);
            } 
            // fall through
          case 27: break;
          case 6: 
            { return new Token(TipoToken.CONSTANTE_INTEIRA, yytext(), yyline);
            } 
            // fall through
          case 28: break;
          case 7: 
            { return new Token(TipoToken.ATRIBUICAO, yytext(), yyline);
            } 
            // fall through
          case 29: break;
          case 8: 
            { return new Token(TipoToken.SEPARADOR_COMANDO, yytext(), yyline);
            } 
            // fall through
          case 30: break;
          case 9: 
            { return new Token(TipoToken.SEPARADOR_ARGUMENTO, yytext(), yyline);
            } 
            // fall through
          case 31: break;
          case 10: 
            { yyline++;
            } 
            // fall through
          case 32: break;
          case 11: 
            { return new Token(TipoToken.IF, yytext(), yyline);
            } 
            // fall through
          case 33: break;
          case 12: 
            { return new Token(TipoToken.DO, yytext(), yyline);
            } 
            // fall through
          case 34: break;
          case 13: 
            { return new Token(TipoToken.IDENTIFICADOR_COMPOSTO, yytext(), yyline);
            } 
            // fall through
          case 35: break;
          case 14: 
            { return new Token(TipoToken.TIPO_DADO, yytext(), yyline);
            } 
            // fall through
          case 36: break;
          case 15: 
            { return new Token(TipoToken.FOR, yytext(), yyline);
            } 
            // fall through
          case 37: break;
          case 16: 
            { return new Token(TipoToken.ELSE, yytext(), yyline);
            } 
            // fall through
          case 38: break;
          case 17: 
            { return new Token(TipoToken.NOME_RESERVADO, yytext(), yyline);
            } 
            // fall through
          case 39: break;
          case 18: 
            { return new Token(TipoToken.CLASSE, yytext(), yyline);
            } 
            // fall through
          case 40: break;
          case 19: 
            { return new Token(TipoToken.WHILE, yytext(), yyline);
            } 
            // fall through
          case 41: break;
          case 20: 
            { return new Token(TipoToken.MODIFICADOR, yytext(), yyline);
            } 
            // fall through
          case 42: break;
          case 21: 
            { return new Token(TipoToken.IMPORT, yytext(), yyline);
            } 
            // fall through
          case 43: break;
          case 22: 
            { return new Token(TipoToken.PACOTE, yytext(), yyline);
            } 
            // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
